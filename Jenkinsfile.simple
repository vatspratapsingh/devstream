pipeline {
  agent any

  environment {
    DOCKER_IMAGE = 'devstream-backend'
    CONTAINER_NAME = 'devstream-backend-container'
    HOST_PORT = '3100'
    CONTAINER_PORT = '3000'
    PATH = "/opt/homebrew/bin:/opt/homebrew/sbin:${env.PATH}"
  }

  stages {
    stage('Setup Environment') {
      steps {
        script {
          echo 'üîß Setting up environment...'
          
          // Clean up any existing containers
          sh '''
            docker ps -a --filter "name=${CONTAINER_NAME}" --format "{{.ID}}" | xargs -r docker rm -f
            docker images --filter "dangling=true" --format "{{.ID}}" | xargs -r docker rmi
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          echo 'üê≥ Building Docker image...'
          
          dir('backend') {
            sh "docker build -t ${DOCKER_IMAGE}:latest ."
            sh "docker tag ${DOCKER_IMAGE}:latest ${DOCKER_IMAGE}:${BUILD_NUMBER}"
          }
          
          echo "‚úÖ Docker image built: ${DOCKER_IMAGE}:${BUILD_NUMBER}"
        }
      }
    }

    stage('Run Tests') {
      steps {
        script {
          echo 'üß™ Running tests...'
          
          dir('backend') {
            // Run tests in Docker container
            sh '''
              docker run --rm \
                --name test-container \
                ${DOCKER_IMAGE}:latest \
                npm test
            '''
          }
          
          echo "‚úÖ Tests completed successfully"
        }
      }
      post {
        always {
          script {
            // Clean up test container
            sh 'docker rm -f test-container || true'
          }
        }
      }
    }

    stage('Deploy Application') {
      steps {
        script {
          echo 'üöÄ Deploying application...'
          
          // Stop and remove existing container
          sh '''
            docker ps -a --filter "name=${CONTAINER_NAME}" --format "{{.ID}}" | xargs -r docker rm -f
          '''
          
          // Start new container
          sh '''
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${HOST_PORT}:${CONTAINER_PORT} \
              --restart unless-stopped \
              ${DOCKER_IMAGE}:latest
          '''
          
          // Wait for container to start
          sleep 5
          
          // Verify container is running
          def containerStatus = sh(
            script: "docker ps --filter 'name=${CONTAINER_NAME}' --format '{{.Status}}'",
            returnStdout: true
          ).trim()
          
          echo "üìä Container status: ${containerStatus}"
          
          // Health check
          def healthCheck = sh(
            script: "curl -f http://localhost:${HOST_PORT}/health || echo 'Health check failed'",
            returnStdout: true
          ).trim()
          
          echo "üè• Health check response: ${healthCheck}"
        }
      }
    }

    stage('Post-Deployment Verification') {
      steps {
        script {
          echo 'üîç Verifying deployment...'
          
          // Test API endpoints
          sh '''
            echo "Testing root endpoint..."
            curl -f http://localhost:${HOST_PORT}/ || echo "Root endpoint failed"
            
            echo "Testing health endpoint..."
            curl -f http://localhost:${HOST_PORT}/health || echo "Health endpoint failed"
            
            echo "Testing notes endpoint..."
            curl -f http://localhost:${HOST_PORT}/api/notes || echo "Notes endpoint failed"
          '''
          
          echo "‚úÖ Deployment verification completed"
        }
      }
    }
  }

  post {
    always {
      script {
        echo 'üßπ Cleaning up...'
        
        // Clean up old images (keep last 5)
        sh '''
          docker images ${DOCKER_IMAGE} --format "{{.ID}}" | tail -n +6 | xargs -r docker rmi
        '''
        
        // Display final status
        echo "üéâ Pipeline completed!"
        echo "üì± Application URL: http://localhost:${HOST_PORT}"
        echo "üè• Health Check: http://localhost:${HOST_PORT}/health"
        echo "üìö API Docs: http://localhost:${HOST_PORT}/"
      }
    }
    
    success {
      script {
        echo '‚úÖ Pipeline completed successfully!'
      }
    }
    
    failure {
      script {
        echo '‚ùå Pipeline failed!'
        
        // Clean up on failure
        sh '''
          docker rm -f ${CONTAINER_NAME} || true
        '''
      }
    }
  }
}
